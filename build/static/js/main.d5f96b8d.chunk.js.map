{"version":3,"sources":["services/persons.js","Form.js","Phonebook.js","Filter.js","Notifications.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Form","persons","setPersons","setNotification","useState","newName","setNewName","newNumber","setNewNumber","onSubmit","e","preventDefault","newPerson","name","number","dateAdded","Date","toISOString","duplicates","filter","person","toLowerCase","length","personService","updatedPerson","map","catch","error","handleUpdate","createdPerson","concat","value","onChange","target","type","Person","handleDelete","className","onClick","Phonebook","peopleToShow","i","key","Filter","newFilter","handleNewFilter","Notification","message","App","notificationMessage","useEffect","initialPersons","console","log","setNewFilter","includes","Notifications","window","confirm","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d5f96b8d.chunk.js","sourcesContent":["import axios from \"axios\";\nconst baseUrl = \"/api/persons\";\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then((response) => response.data);\n};\n\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then((response) => response.data);\n};\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then((response) => response.data);\n};\n\nconst remove = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`);\n  return request.then((response) => response.data);\n};\n\nexport default {\n  getAll,\n  create,\n  update,\n  remove,\n};\n","import React, { useState } from \"react\";\nimport personService from \"./services/persons\";\n\nconst Form = ({ persons, setPersons, setNotification }) => {\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n\n  const handleNewName = (e) => setNewName(e.target.value);\n  const handleNewNumber = (e) => setNewNumber(e.target.value);\n\n  const handleUpdate = (id, newPerson) => {\n    personService\n      .update(id, newPerson)\n      .then((updatedPerson) => {\n        setPersons(\n          persons.map((person) => (person.id !== id ? person : updatedPerson))\n        );\n        setNotification(`${newPerson.name} updated`);\n      })\n      .catch((error) => {\n        setNotification(error.response.data);\n      });\n  };\n\n  const handleNewPerson = (e) => {\n    e.preventDefault();\n\n    const newPerson = {\n      name: newName,\n      number: newNumber,\n      dateAdded: new Date().toISOString(),\n    };\n\n    // if the filtered array is not 0 - there is a duplicate\n    const duplicates = persons.filter(\n      (person) => person.name.toLowerCase() === newName.toLowerCase()\n    );\n\n    duplicates.length !== 0\n      ? handleUpdate(duplicates[0].id, newPerson)\n      : personService\n          .create(newPerson)\n          .then((createdPerson) => {\n            setPersons(persons.concat(createdPerson));\n            setNotification(`${newPerson.name} created!`);\n          })\n          .catch((error) => {\n            setNotification(error.response.data.error);\n          });\n\n    // clear fields\n    setNewName(\"\");\n    setNewNumber(\"\");\n  };\n\n  return (\n    <form onSubmit={handleNewPerson}>\n      <div>\n        name: <input value={newName} onChange={handleNewName} />\n        <br />\n        number: <input value={newNumber} onChange={handleNewNumber} />\n        <br />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  );\n};\n\nexport default Form;\n","import React from \"react\";\n\nconst Person = ({ person, handleDelete }) => {\n  return (\n    <p className=\"person\">\n      {person.name} - {person.number} -{\" \"}\n      {<button onClick={() => handleDelete(person.id)}>Delete</button>}\n    </p>\n  );\n};\n\nconst Phonebook = ({ peopleToShow, handleDelete }) =>\n  peopleToShow.length > 0 ? (\n    peopleToShow.map((person, i) => (\n      <Person key={i} person={person} handleDelete={handleDelete} />\n    ))\n  ) : (\n    <p>No match</p>\n  );\n\nexport default Phonebook;\n","import React from \"react\";\n\nconst Filter = ({ newFilter, handleNewFilter }) => {\n  return (\n    <p>\n      Filter: <input value={newFilter} onChange={handleNewFilter} />\n    </p>\n  );\n};\n\nexport default Filter;\n","import React from \"react\";\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null;\n  }\n\n  return <div className=\"error\">{message}</div>;\n};\n\nexport default Notification;\n","import React, { useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Form from \"./Form\";\nimport Phonebook from \"./Phonebook\";\nimport Filter from \"./Filter\";\nimport Notifications from \"./Notifications\";\nimport personService from \"./services/persons\";\nimport \"./index.css\";\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [notificationMessage, setNotification] = useState(null);\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then((initialPersons) => setPersons(initialPersons))\n      .catch((error) => console.log(error.response.data));\n  }, []);\n\n  const [newFilter, setNewFilter] = useState(\"\");\n  const handleNewFilter = (e) => setNewFilter(e.target.value);\n\n  const handleDelete = (id) => {\n    window.confirm(`Delete person ${id}?`)\n      ? personService\n          .remove(id)\n          .then((response) => {\n            setPersons(\n              persons.filter((person) =>\n                person.id !== id ? person : response.data\n              )\n            );\n            setNotification(`Person #${id} was deleted`);\n          })\n          .catch((error) => {\n            console.log(error.response.data);\n            setNotification(error.response.data);\n          })\n      : setNotification(`Deleteing #${id} failed `);\n  };\n\n  // if theres a flter get the filtered list - otherwise show all\n  const peopleToShow = newFilter\n    ? persons.filter((person) =>\n        // lowercase the name and the filter to make search case insensitive\n        person.name.toLowerCase().includes(newFilter.toLowerCase())\n      )\n    : persons;\n\n  return (\n    <div>\n      <Notifications message={notificationMessage} />\n      <h2>Phonebook</h2>\n      <Filter newFilter={newFilter} handleNewFilter={handleNewFilter} />\n      <h3>Add a new person</h3>\n      <Form\n        persons={persons}\n        setPersons={setPersons}\n        setNotification={setNotification}\n      />\n      <h3>Numbers</h3>\n      <Phonebook peopleToShow={peopleToShow} handleDelete={handleDelete} />\n    </div>\n  );\n};\n\nexport default App;\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}